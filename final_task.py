from __future__ import annotations  # для аннотации собственным классом
from pprint import pprint  # для красивого вывода словаря
import click  # для CLI, пока не используется :)


class Pizza:
    '''
    Базовый класс для всех видов пицц.

    Атрибуты класса
    =======
    l_size : int
        размер L
    xl_size : int
        размер XL

    Атрибуты экземпляра
    =======
    recipe : dict
        рецепт пиццы

    Методы класса
    =======
    avalible_size():
        Печатает доступные размеры пиццы для заказа.

    Методы экземпляра
    =======
    avalible_dict():
        Печатает рецепт пиццы.
    '''

    # Доступный размер ЛЮБОЙ пиццы в см
    # поэтому и вынес в атрибуты класса
    l_size = 30
    xl_size = 40

    def __init__(self):
        self.recipe = {}

    def __eq__(self, other: Pizza) -> None:  # сравнение пицц
        if not isinstance(other, Pizza):
            print('Вы пытайтесь сравнить пиццу не с пиццой!')
            return
        if self.__class__.__name__ == other.__class__.__name__:
            print('Это один и тот же вид пиццы :)')
            return

        my_len = len(self.recipe)  # длина рецепта левой пиццы
        other_len = len(other.recipe)  # длина рецепта правой пиццы
        if my_len > other_len:
            print('В левой пицце больше ингридиентов')
        elif my_len < other_len:
            print('В левой пицце меньше ингридиентов')
        else:
            print('В пиццах одинаковое кол-во ингридиентов')

    @classmethod
    def avalible_size(cls: Pizza | Margherita | Pepperoni | Hawaiian) -> None:
        '''Выводит доступные размеры для любой пиццы'''

        print('У Вас есть два варианта размера пиццы:')
        print(f'размер L -> {cls.l_size} см')
        print(f'размер XL -> {cls.l_size} см')

    def dict(self) -> None:
        '''Выводит рецепт конкретной пиццы'''

        print(f'Рецепт пиццы {self.__class__.__name__}:')
        # смотрим, что хранится в атрибуте-рецепте каждого класса пиццы
        pprint(self.__getattribute__('recipe'))


class Margherita(Pizza):
    '''
    Класс пиццы Маргариты.
    Содержит единственный атрибут -> рецепт.
    '''

    def __init__(self):
        # можно и без этой строки, добавил, чтобы линтер не ругался ;)
        super().__init__()
        self.recipe = {'Пшеничная мука': '1.5 стол. ложки',
                       'Сухие дрожжи': '1 чай. ложка',
                       'Оливковое масло': '2 стак.',
                       'Томатная паста': '3 стол. ложки',
                       'Моцарелла': '200 гр.',
                       'Помидоры черри': '8 шт.',
                       'Чеснок': '1 зубч.'}


class Pepperoni(Pizza):
    '''
    Класс пиццы Пепперони.
    Содержит единственный атрибут -> рецепт.
    '''

    def __init__(self):
        super().__init__()
        self.recipe = {'Пшеничная мука': '1.5 стол. ложки',
                       'Сухие дрожжи': '1 чай. ложка',
                       'Оливковое масло': '3 стак.',
                       'Томатная паста': '5 стол. ложек',
                       'Смесь секретных трав': '100 гр.',
                       'Сырокопченая колбаса': '150 гр.',
                       'Паприка': '1 щепотка',
                       'Моцарелла': '200 гр.',
                       'Помидоры черри': '6 шт.'}


class Hawaiian(Pizza):
    '''
    Класс Гавайской пиццы.
    Содержит единственный атрибут -> рецепт.
    '''

    def __init__(self):
        super().__init__()
        self.recipe = {'Мука пшеничная': '450 Грамм',
                       'Вода': '180 Грамм',
                       'Масло растительное': '1.5 Ст. ложки',
                       'Сахар': '0.5 Чайных ложки',
                       'Соль': '0.5 Чайных ложки',
                       'Дрожжи': '5 Грамм',
                       'Куриное филе': '180 Грамм',
                       'Сыр': '50 Грамм',
                       'Ананасы': '150 Грамм',
                       'Кетчуп': '2 Ст. ложки',
                       'Майонез': '1 Ст. ложка'}


if __name__ == '__main__':  # микро тестики
    # создаём экземпляры классов
    margo = Margherita()
    peperoni = Pepperoni()
    hawaii = Hawaiian()
    pizza = Pizza()

    # выводит доступные размеры пиццы
    margo.avalible_size()
    print('=' * 30)

    # посмотрим рецепт каждого вида пиццы
    for instance in [margo, peperoni, hawaii]:
        instance.dict()
        print('=' * 30)

    # сравнение двух различных видов пицц
    margo == peperoni
    margo != peperoni
    # сравнение двух одинаковых видов пицц
    margo == margo
    margo != margo
